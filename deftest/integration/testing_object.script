local container = require "deftest.integration.integration_tests_container"
local telescope = require "deftest.telescope"

function init(self)
	self.max_time = 1
	self.time_since_test_start = 0
	self.running = false
end

function get_message(self, message)
	self.running = false
	local after_without_message = container.context_table[self.index].after
	local after_with_message = function()
		-- Insert message inside the test's environment.
		local env = {}
		setmetatable(env, {__index = getfenv(1)})
		env["message"] = message
		setfenv(after_without_message, env)()
	end
	invoke_test(self, after_with_message)
	msg.post(self.integration_test_manager, "test_processed", {index = self.index})
	go.delete(".")
end

function test_after_waiting(self)
	self.running = false
		invoke_test(self, container.context_table[self.index].after)
	msg.post(self.integration_test_manager, "test_processed", {index = self.index})
	go.delete(".")
end

function invoke_test(self, func)
	local result = {}
	result.status_code, result.assertions_invoked, result.message = telescope.invoke_test_separately(func)
	local result_func = function() end
	if result.status_code == telescope.status_codes.pass then
		result_func = function() assert(true, result.message) end
	elseif result.status_code == telescope.status_codes.fail or result.status_code == telescope.status_codes.err then
		result_func = function() assert(false, result.message) end
	elseif result.status_code == telescope.status_codes.pending then
		result_func = {}
	end
	container.add_processed_test(self.index, result_func)
end

function invoke_before(self, func)
	local result, message = xpcall(func, debug.traceback)
	if not result then
		container.add_processed_test(self.index, function()
			assert(false, message)
		end)
		msg.post(self.integration_test_manager, "error", {index = self.index})
		go.delete(".")
	end
end

function test_too_long(self)
	container.add_processed_test(self.index, function()
		assert(false, "test took too long")
	end)
	self.running = false
	msg.post(self.integration_test_manager, "test_too_long", {index = self.index})
	go.delete(".")
end

function update(self, dt)
	if self.running then
		self.time_since_test_start = self.time_since_test_start + dt
		if self.time_since_test_start > self.max_time then
			if self.type == "wait" then
				test_after_waiting(self)
			else
				test_too_long(self)
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("execute") then
		self.index = message.index
		self.integration_test_manager = sender
		self.type = container.context_table[message.index].type
		self.max_time = container.context_table[message.index].max_time
		self.running = true
		invoke_before(self, container.context_table[message.index].before)
	elseif self.running then
		if self.type == "message" and sender == msg.url(container.context_table[self.index].sender)
		and message_id == hash(container.context_table[self.index].message_id) then
			get_message(self, message)
		end
	end
end
