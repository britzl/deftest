local container = require "integration.integration_tests_container"

function init(self)
	self.max_time = 1
	self.time_since_test_start = 0
	self.running = false
end

function get_message(self, message)
	self.running = false
	container.add_processed_test(self.index, container.context_table[self.index].after(message))
	msg.post(self.integration_test_manager, "test_processed", {index = self.index})
	go.delete(".")
end

function test_after_waiting(self)
	self.running = false
	container.add_processed_test(self.index, container.context_table[self.index].after())
	msg.post(self.integration_test_manager, "test_processed", {index = self.index})
	go.delete(".")
end

function test_too_long(self)
	container.add_processed_test(self.index, function()
		assert(false)
	end)
	self.running = false
	msg.post(self.integration_test_manager, "test_too_long", {index = self.index})
	go.delete(".")
end

function update(self, dt)
	if self.running then
		self.time_since_test_start = self.time_since_test_start + dt
		if self.time_since_test_start > self.max_time then
			if self.type == "wait" then
				test_after_waiting(self)
			else
				test_too_long(self)
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("execute") then
		self.index = message.index
		self.integration_test_manager = sender
		self.type = container.context_table[message.index].type
		self.max_time = container.context_table[message.index].max_time
		self.running = true
		container.context_table[message.index].before()
	elseif self.running then
		if self.type == "message" and sender == msg.url(container.context_table[self.index].sender)
		and message_id == hash(container.context_table[self.index].message_id) then
			get_message(self, message)
		end
	end
end
