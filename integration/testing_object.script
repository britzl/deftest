local container = require "integration.integration_tests_container"

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("execute") then
		self.test_name = message.test_name
		self.integration_test_manager = sender
		self.type = container.tests[message.test_name].test.type
		
		container.tests[message.test_name].test.before()
	elseif self.type == "message"
	and sender == container.tests[self.test_name].test.sender
	and message_id == hash(container.tests[self.test_name].test.message_id) then
		container.add_processed_test(self.test_name, container.tests[self.test_name].test.after(message))
		msg.post(self.integration_test_manager, "test_processed")
	end
end

-- Example of the .after fragment for message testing.
--	test.after = function(message)
--		return function()
-- 			describe("testing object", function()
--				test("testing object test", function()
--					assert(message.text == "Hello world!")
--				end)
--			end)
--		end
--	end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
